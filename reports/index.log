Traceback (most recent call last):
  File "/opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/site-packages/jupyter_cache/executors/utils.py", line 51, in single_nb_execution
    executenb(
  File "/opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/site-packages/nbclient/client.py", line 1093, in execute
    return NotebookClient(nb=nb, resources=resources, km=km, **kwargs).execute()
  File "/opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/site-packages/nbclient/util.py", line 84, in wrapped
    return just_run(coro(*args, **kwargs))
  File "/opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/site-packages/nbclient/util.py", line 62, in just_run
    return loop.run_until_complete(coro)
  File "/opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/asyncio/base_events.py", line 641, in run_until_complete
    return future.result()
  File "/opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/site-packages/nbclient/client.py", line 559, in async_execute
    await self.async_execute_cell(
  File "/opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/site-packages/nbclient/client.py", line 854, in async_execute_cell
    self._check_raise_for_error(cell, exec_reply)
  File "/opt/hostedtoolcache/Python/3.10.0/x64/lib/python3.10/site-packages/nbclient/client.py", line 756, in _check_raise_for_error
    raise CellExecutionError.from_cell_and_msg(cell, exec_reply_content)
nbclient.exceptions.CellExecutionError: An error occurred while executing the following cell:
------------------
import sys
sys.path.append('../regex_system_solver/')

import re
import Regex
import Equation
from graphviz import Digraph
import rules

# –ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ —Ä–∞–∑–±–æ—Ä–∞ —Å–∏–º–≤–æ–ª–∞ —Ä–µ–≥—É–ª—è—Ä–Ω–æ–≥–æ –≤—ã—Ä–∞–∂–µ–Ω–∏—è
def parse_symbol(tokens):
    if re.fullmatch('[a-z0-9Œµ√ò]', tokens[0]):
        return Regex.Regex(Regex.Operation.CONST, tokens.pop(0))

# –ù–æ–≤–æ–µ –ø—Ä–∞–≤–∏–ª–æ —Ä–∞–∑–±–æ—Ä–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
def parse_var(tokens):
    def parse_index():
        if len(tokens) != 0 and re.fullmatch(r'[\u2080-\u2089]', tokens[0]):
            return tokens.pop(0) + parse_index()
        return ''
    if len(tokens) != 0 and re.fullmatch(r'[A-Z]', tokens[0]):
        var = tokens.pop(0)
        return var + parse_index()

Regex.Regex.set_parse_symbol(parse_symbol)
Regex.Regex.set_one('Œµ')
Regex.Regex.set_zero('√ò')
Equation.Equation.set_parse_var(parse_var)

class DFA:
    def __init__(self, states, start_state, finite_states, transitions):
        self.states = states
        self.start_state = start_state
        self.finite_states = finite_states
        self.transitions = transitions
    
    def parse(text):
        if not re.fullmatch(rules.dfa, text):
            raise Exception('Incorrect DFA')
        def to_unicode(state):
            state = state.strip()
            index = ''
            for digit in state[1:]:
                index += chr(ord('\u2080') | int(digit))
            return f'{state[0]}{index}'
        start_state = to_unicode(re.search(rules.state, text).group(0))
        states = set()
        transitions = []
        for transition_text in re.findall(rules.transition, text):
            transition = re.findall(f'<({rules.state}),({rules.letter}),({rules.state})>', transition_text)[0]
            transitions.append((to_unicode(transition[0]), transition[1].strip(), to_unicode(transition[2])))
            states.add(to_unicode(transition[0])); states.add(to_unicode(transition[2]))
        finite_states = set()
        for finite_state in re.findall(rules.state, re.search(rules.finite_states, text).group(0)):
            finite_states.add(to_unicode(finite_state))
        return DFA(states, start_state, finite_states, transitions)
    
    def to_graph(self):
        graph = Digraph(graph_attr={'rankdir': 'LR'}, format='svg')
        graph.node('', shape='none')
        graph.node(self.start_state, shape='circle')
        graph.edge('', self.start_state)
        for state, letter, other_state in self.transitions:
            graph.node(state, shape='circle')
            graph.node(other_state, shape='circle')
            graph.edge(state, other_state, letter)
        for finite_state in self.finite_states:
            graph.node(finite_state, shape='doublecircle')
        return graph

    def to_regex(self):
        start_equation = None
        system = []
        for state in self.states:
            terms = []
            for transition in self.transitions:
                if transition[0] == state:
                    terms.append(transition[1] + transition[2])
            if state in self.finite_states:
                terms.append('Œµ')
            system.append(Equation.Equation.parse(f'{state}={"+".join(terms)}'))
            if state == self.start_state:
                start_equation = system[-1]
        Equation.solve_system(system)
        return str(start_equation).split('=')[1].strip()
------------------

[0;31m---------------------------------------------------------------------------[0m
[0;31mModuleNotFoundError[0m                       Traceback (most recent call last)
[0;32m/tmp/ipykernel_1752/2887821008.py[0m in [0;36m<module>[0;34m[0m
[1;32m      5[0m [0;32mimport[0m [0mRegex[0m[0;34m[0m[0;34m[0m[0m
[1;32m      6[0m [0;32mimport[0m [0mEquation[0m[0;34m[0m[0;34m[0m[0m
[0;32m----> 7[0;31m [0;32mfrom[0m [0mgraphviz[0m [0;32mimport[0m [0mDigraph[0m[0;34m[0m[0;34m[0m[0m
[0m[1;32m      8[0m [0;32mimport[0m [0mrules[0m[0;34m[0m[0;34m[0m[0m
[1;32m      9[0m [0;34m[0m[0m

[0;31mModuleNotFoundError[0m: No module named 'graphviz'
ModuleNotFoundError: No module named 'graphviz'

